class MobileNetV2Block(nn.Module):
    def __init__(self, in_channels, out_channels, ksize=3, stride=1,  padding = 0, group=1):
        super(MobileNetV2Block, self).__init__()
        # print(out_channels)
        t, decent_channel = out_channels
        self.con = nn.Sequential(
            #1*1升通道
            nn.Conv2d(in_channels=in_channels, out_channels=t*in_channels, kernel_size=1, stride=1, padding=0, groups=1),
            nn.BatchNorm2d(t*in_channels),
            nn.ReLU6(),
            #3*3融合像素
            nn.Conv2d(t*in_channels, t*in_channels, kernel_size=ksize, stride=stride, padding=padding, groups=t*in_channels),
            nn.BatchNorm2d(t*in_channels),
            nn.ReLU6(),
            #1*1降低通道
            nn.Conv2d(t*in_channels, decent_channel, kernel_size=1, stride=1, padding=0),
            nn.BatchNorm2d(decent_channel)
        )
    def forward(self, x):
        return self.con(x)


class MobileNetV2(nn.Module):
    def __init__(self):
        super(MobileNetV2, self).__init__()
        self.con = nn.Sequential(
            nn.Conv2d(3, 32, 3, 2, 1),
            MobileNetV2Block(32, (1, 16), ksize=3, stride=1, padding=1),

            MobileNetV2Block(16, (6, 24), ksize=3, stride=1, padding=1),
            MobileNetV2Block(24, (6, 24), ksize=3, stride=2, padding=1),
            #
            MobileNetV2Block(24, (6, 32), ksize=3, stride=1, padding=1),
            MobileNetV2Block(32, (6, 32), ksize=3, stride=1, padding=1),
            MobileNetV2Block(32, (6, 32), ksize=3, stride=2, padding=1),

            MobileNetV2Block(32, (6, 64), ksize=3, stride=1, padding=1),
            MobileNetV2Block(64, (6, 64), ksize=3, stride=1, padding=1),
            MobileNetV2Block(64, (6, 64), ksize=3, stride=1, padding=1),
            MobileNetV2Block(64, (6, 64), ksize=3, stride=2, padding=1),

            MobileNetV2Block(64, (6, 96), ksize=3, stride=1, padding=1),
            MobileNetV2Block(96, (6, 96), ksize=3, stride=1, padding=1),
            MobileNetV2Block(96, (6, 96), ksize=3, stride=1, padding=1),

            MobileNetV2Block(96,  (6, 160), ksize=3, stride=1, padding=1),
            MobileNetV2Block(160, (6, 160), ksize=3, stride=1, padding=1),
            MobileNetV2Block(160, (6, 160), ksize=3, stride=2, padding=1),
            #
            MobileNetV2Block(160, (6, 320), ksize=3, stride=1, padding=1),
            MobileNetV2Block(320, (6, 320), ksize=3, stride=1, padding=1),
            MobileNetV2Block(320, (6, 320), ksize=3, stride=1, padding=1),
            nn.Conv2d(320, 1280, 1, 1),
            nn.AvgPool2d(7),
            nn.Conv2d(1280, 1, 1, 1)
        )
    def forward(self, x):
        return self.con(x)
